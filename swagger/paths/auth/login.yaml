tags:
  - Authentication
summary: Login user
description: |
  Authenticates a user with email and password.
  
  **Security Features:**
  - Rate limiting to prevent brute force attacks
  - Input validation and sanitization
  - Secure password verification
  
  **Response includes:**
  - User information (without sensitive data)
  - Access token for authentication
  - Refresh token set as HTTP-only cookie
  - CSRF token set as cookie
  
  **Authentication:** This endpoint does NOT require authentication - it's used to authenticate users.
operationId: loginUser
security: []
requestBody:
  required: true
  content:
    application/json:
      schema:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            format: email
            description: User's email address
            example: "john.doe@example.com"
          password:
            type: string
            minLength: 8
            maxLength: 50
            description: User's password
            example: "securePassword123"
      examples:
        valid_login:
          summary: Valid user login
          value:
            email: "john.doe@example.com"
            password: "securePassword123"
        invalid_email:
          summary: Invalid email format
          value:
            email: "invalid-email"
            password: "password123"
        short_password:
          summary: Password too short
          value:
            email: "user@example.com"
            password: "123"
        wrong_credentials:
          summary: Wrong email or password
          value:
            email: "wrong@example.com"
            password: "wrongpassword"
responses:
  '200':
    description: |
      User logged in successfully.
      
      **Important:** After successful login, you receive:
      - `accessToken` in the response body - use this for authenticated requests
      - `refreshToken` in HTTP-only cookie - automatically handled by browser
      - CSRF token in cookie - include in subsequent requests as `X-CSRF-Token` header
      
      You can now use these tokens for authenticated endpoints.
    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 200
              description: HTTP status code
            message:
              type: string
              example: "Login successful"
              description: Response message
            data:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique user identifier
                      example: "550e8400-e29b-41d4-a716-446655440000"
                    firstName:
                      type: string
                      description: User's first name
                      example: "John"
                    lastName:
                      type: string
                      description: User's last name
                      example: "Doe"
                    email:
                      type: string
                      format: email
                      description: User's email address
                      example: "john.doe@example.com"
                    phoneNumber:
                      type: string
                      description: User's phone number
                      example: "07123456789"
                    avatarUrl:
                      type: string
                      format: uri
                      nullable: true
                      description: URL to user's avatar image
                      example: null
                    address_id:
                      type: string
                      format: uuid
                      nullable: true
                      description: ID of user's address
                      example: null
                    createdAt:
                      type: string
                      format: date-time
                      description: User creation timestamp
                      example: "2023-12-01T10:30:00.000Z"
                    updatedAt:
                      type: string
                      format: date-time
                      description: User last update timestamp
                      example: "2023-12-01T10:30:00.000Z"
                accessToken:
                  type: string
                  description: JWT access token for authentication
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    headers:
      Set-Cookie:
        description: |
          HTTP-only cookies automatically set by the server:
          - refreshToken: Used for token refresh (handled automatically by browser)
          - csrfToken: CSRF protection token (include in X-CSRF-Token header)
        schema:
          type: string
          example: "refreshToken=abc123...; HttpOnly; Secure; SameSite=Strict"
  '400':
    description: Validation error or bad request
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: integer
              example: 400
            message:
              type: string
              example: "Validation failed"
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Email must be a valid email address"
  '401':
    description: Unauthorized - Invalid credentials
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: integer
              example: 401
            message:
              type: string
              example: "Invalid email or password"
  '429':
    description: Too many requests - Rate limit exceeded
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: integer
              example: 429
            message:
              type: string
              example: "Too many requests, please try again later"
  '500':
    description: Internal server error
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: integer
              example: 500
            message:
              type: string
              example: "Internal server error"